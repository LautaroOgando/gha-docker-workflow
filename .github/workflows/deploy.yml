name: Deploy Node.js Service to Linux Server

on:
  push:
    branches:
      - main

env:
  DOCKER_REPO: lauchacabj12/node-js-service 
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest 
   
    steps:
      - name: Checkout code

        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
   
      - name: Build and push Docker image

        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Linux Server via SSH
       # This step connects to the remote server via SSH and performs the deployment steps
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 8443 
          script: |
            CONTAINER_NAME="node-js-service"
            # 1. Log in to Docker Hub from the server
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # 2. Pull the latest image from the repository
            docker pull ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}

            # 3. Stop and remove the old container
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # 4. Run the new container, mapping the application port
            docker run -d \
              --name $CONTAINER_NAME \
              -p 3001:3001 \
              -e BASIC_AUTH_USERNAME="${{ secrets.BASIC_AUTH_USERNAME }}" \
              -e BASIC_AUTH_PASSWORD="${{ secrets.BASIC_AUTH_PASSWORD }}" \
              -e BASIC_SECRET_MESSAGE="${{ secrets.BASIC_SECRET_MESSAGE }}" \
              ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}

            sleep 5
            CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' $CONTAINER_NAME)

            if [ "$CONTAINER_STATUS" != "running" ]; then
              echo "::error::The container stopped immediately."
              echo "Logs:"
              docker logs $CONTAINER_NAME
              exit 1
            fi

            echo "Success: The container is running."